import React, { useState }from "react";
import { View, Text, StyleSheet, Switch, Modal } from "react-native";
import { FlatList, Pressable } from "react-native-gesture-handler";
import { SafeAreaView } from "react-native-safe-area-context";
import { Alarm } from "../data/alarm";
import { isEnabled } from "react-native/Libraries/Performance/Systrace";
import Entypo from '@expo/vector-icons/Entypo';
import AddAlarmScreen from "./AlarmConfig";
import { useNavigation } from "@react-navigation/native";
import { RootStackParamList } from "../types";
import { StackNavigationProp } from "@react-navigation/stack";
import { navigate } from "expo-router/build/global-state/routing";

type HomeScreenNavigationsProp = StackNavigationProp<RootStackParamList, 'Home'>;

const AlarmScreen = () => {

    const navigation = useNavigation<HomeScreenNavigationsProp>(); //Acces a la navigation.

    const [alarms, setAlarm] = useState<Alarm[]>([
        { id: 1, time: "07:00 AM", isActive: true, testSubject: "Probability", workingDay: [1, 1, 1, 1, 1, 1, 1] },
        { id: 2, time: "08:30 AM", isActive: true, testSubject: "Graph Theory", workingDay: [1, 0, 1, 1, 0, 1, 1] },
    ]);

    const emptyAlarm : Alarm = {
        id: 0, 
        time: "00:00", 
        isActive: false,
        testSubject: "", 
        workingDay: [0, 0, 0, 0, 0, 0, 0], 
      };

    const daySet = (id: number, day:number): boolean => {
        const alarm = alarms.find((item) => item.id === id); //Erreur de
        if (alarm){
            if(alarm.workingDay[day-1]){
                return true;
            }
        }
        return false;
    };

    const toogleSwitch = (id: number) => {
        setAlarm((prevAlarms) => 
            prevAlarms.map((alarm) =>
                alarm.id === id ? { ...alarm, isActive: ! alarm.isActive} : alarm
            )
        );
    };
    const [isMenuVisible, setIsMenuVisible] = useState(false);

    return (
        
        <SafeAreaView style={styles.container}>
            {/* <Pressable onPress={() => setIsMenuVisible(false)}> */}
            <View>
                {/* Title */}
                <Text style={styles.title}>Your exam are coming soon ü´µüèæ!</Text>
                {/* Motivation Text */}
                <View style={styles.motivationContainer}>
                    <Text style={styles.motivationTextTitle}>Daily Motivation:</Text>
                    <Text style={styles.motivationText}> "Motivation sentence generated by an IA"</Text>
                </View>
                

  
                {/* Will ring in */}
                <View>
                    <Text style={styles.textStyle}>Your next alarm will ring in: </Text>
                </View>

                {/* Alarms List */}
                <FlatList
                    data={alarms}
                    keyExtractor={(item) => item.id.toString()}
                    renderItem={({ item }) => ( 
                        <View style={styles.listItemContainer}>
                            {/* Days and time printer */}
                            <View style={styles.listItemStyle}>
                                <View style={styles.dayPrinter}>
                                    <Text style={ daySet(item.id, 7) ? styles.daySetText: styles.dayNotSetText}>S</Text>
                                    <Text style={ daySet(item.id, 1) ? styles.daySetText: styles.dayNotSetText}>M</Text>
                                    <Text style={ daySet(item.id, 2) ? styles.daySetText: styles.dayNotSetText}>T</Text>
                                    <Text style={ daySet(item.id, 3) ? styles.daySetText: styles.dayNotSetText}>W</Text>
                                    <Text style={ daySet(item.id, 4) ? styles.daySetText: styles.dayNotSetText}>T</Text>
                                    <Text style={ daySet(item.id, 5) ? styles.daySetText: styles.dayNotSetText}>F</Text>
                                    <Text style={ daySet(item.id, 6) ? styles.daySetText: styles.dayNotSetText}>S</Text>
                                </View>
                                <Text style={styles.textStyleTime}>
                                    {item.time}
                                </Text>
                                <Text style={styles.textStyle}>
                                    {"üìù Quiz subject: " + item.testSubject}
                                </Text>
                            </View>
                            {/* Switch and three vertical points */}
                            <View style={styles.switchContainer}>
                                <Switch
                                    trackColor={{false: "#767577", true:"#81b0ff"}}
                                    thumbColor={item.isActive ? "blue" : "#f4f3f4"}
                                    ios_backgroundColor="#3e3e3e"
                                    onValueChange={() => toogleSwitch(item.id)}
                                    value={item.isActive}
                                />
                                <Pressable onPress={() => setIsMenuVisible(true)}>
                                    <Entypo name="dots-three-vertical" size={15} color="white" />
                                </Pressable>
                                {/* {isMenuVisible && (
                                    <Pressable
                                        onPress={(e) => {e.preventDefault}}
                                        style={styles.menuContainer}
                                    >
                                        <Pressable>
                                            <Text style={styles.menuItem}>Edit</Text>
                                        </Pressable>
                                        <Pressable >
                                            <Text style={styles.menuItem}>Delete</Text>
                                        </Pressable>
                                    </Pressable>
                                )} */}

                                {/* Modal for the small menu */}
                                <Modal
                                    visible={isMenuVisible}
                                    transparent={true}
                                    onRequestClose={() => setIsMenuVisible(false)}
                                    animationType="fade"
                                >
                                    <Pressable
                                        style ={styles.modalBackground}
                                        onPress={() => setIsMenuVisible(false)}
                                    >
                                            <Pressable onPress={() => navigation.navigate('AlarmConfig', {alarm: item})}>
                                                <Text style={styles.menuItem}>Edit</Text>
                                            </Pressable>
                                            <Pressable onPress={() => console.log("delete pressed!")}>
                                                <Text style={styles.menuItem}>Delete</Text>
                                            </Pressable>
    
                                    </Pressable>
                                    
                                </Modal>
                            </View>


                        </View>
                            // <Pressable 
                            // onPress={() => navigation.navigate('AlarmConfig', {alarm: item})}
                            // >
                            // </Pressable>
                    )}
                />

                {/* Button for add a New alarm */}

            </View>
            <Pressable 
                onPress={() => navigation.navigate('AlarmConfig', {alarm: emptyAlarm})}
                style={styles.addButton}
            >
                <Text style={styles.addButtonText}>+</Text>
            </Pressable>

            {/* </Pressable> */}
        </SafeAreaView>

    );
};

/*
    -Faire en sorte que le menu disparraisent si on touche l'ecran
    -Faire en sort qu'on ne le change que pour un endroit
*/


const styles = StyleSheet.create({
    addButton:{
        position: "absolute",
        bottom:20,
        backgroundColor: "#6495ED",
        borderRadius: 100,
        height:60,
        width:60,
        alignSelf:"center",
        zIndex:50,

    },
    addButtonText:{
        color: "white",
        fontSize: 50,
        textAlign:"center",
    },
    container: {
        flex: 1,
        //justifyContent: "center",
        backgroundColor: "#1F1B1B",
    },
    dayNotSetText: {
        color: "white",
        marginRight: 5,
    },
    dayPrinter : {
        flex: 1,
        flexDirection: "row",
        marginBottom: 10,
    },
    daySetText: {
        color: "blue",
        marginRight: 5,
    },
    listItemContainer : {
        flex: 1,
        flexDirection: "row",
        backgroundColor: "#3D3636",
        padding: 10,
        marginVertical: 10,
        borderRadius: 5,
        width: '90%',
        alignSelf: "center",
        justifyContent:"space-between",
    },

    listItemStyle: {

    },
    motivationContainer:{
        backgroundColor: "#3D3636",
        width: '90%',
        borderRadius: 5,
        alignSelf: "center",
        marginBottom: 15,
    },
    menuContainer:{
        position: "absolute",
        top: 30,
        right: 0,
        backgroundColor: '#3D3636',
        borderRadius: 5,
        padding: 10,
        elevation: 5, // Ombre pour Android
        shadowColor: '#000', // Ombre pour iOS
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.3,
        shadowRadius: 4,
    },
    menuItem: {
        color: 'white',
        fontSize: 16,
        paddingVertical: 8,
      },
    modalBackground:{
        flex:1,
        justifyContent:"center",
        alignItems:"center",
        backgroundColor: "rgba(0, 0, 0, 0.5)",
    },
    motivationText: {
        fontSize: 20,
        color: "#FFF",
        fontFamily:"Reenie Beanie",
    },
    motivationTextTitle: {
        fontSize: 20,
        fontWeight: "bold",
        color: "#FFF",
        textAlign: "center",
    },
    switchContainer :{
        flexDirection:"column",
        alignItems:"flex-end",
        justifyContent: "space-between",
    },
    textStyle: {
        color: "#FFF", 
        fontSize: 18,
        textAlign:"center",
    },
    textStyleTime: {
        color: "#FFF",
        fontSize: 25,
        marginBottom: 10,
    },
    title:{
        marginVertical: 20,
        color: "#FFF", 
        fontSize: 30,
        textAlign:"center",
    }
});

export default AlarmScreen;